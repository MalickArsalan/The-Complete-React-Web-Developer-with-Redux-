Insatlling Node.js YARN

1. Install node.js  from https://nodejs.org.
2. Run command "node -v" on the command prompt to check if node install.
3. Run command "npm -v" on the command prompt.
4. Run command "npm install -g yarn" on the command prompt. This is going to install globally on your machine.
5. Run command "yarn --version" on the command prompt.
6. Restart your machine if using windows.

Setting up a Web Server

1. Create folder 'react-course-projects'.
2. Create folder 'indecision-app' inside above folder.
3. Open folder 'indecision-app' in VS Code or any other IDE.
4. Open the command prompt and navigate to 'indecision-app' folder. 
5. Create a subfolder inside 'indecision-app' and name it public.
6. This folder is going to contain all the assets, that we actually want to serve up.  
7. Create index.html inside the public folder.
8. Write HTML boilerplate inside the file.
9. Recommended: to install 'emmet'  plugin for auto-completion.
10. Install module live-server, use the command 'yarn global add live-server'. To check if it installs correctly, type and runs the command 'live-server -v'.
10. Now run the command 'live-server public'. This will serve up our public folder.

Hello React

1. Remove text context inside body tag in index.html.
2. Now we are going to install react using CDN
3. In the body tag, include following scripts fir above purpose.
    <script src="https://unpkg.com/react@16.0.0/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16.0.0/umd/react-dom.development.js"></script>
    <script src="/scripts/app.js"></script>
4. create a folder inside a public folder, create scripts folder and then add a file app.js inside scripts folder.
5. Goto browser and, then select tab where localhost app is running and then press Ctrl+shift+I.
6. On the console Type and enter React and then enter ReactDOM.
7. Console a message in app.js and save the file,  and without refreshing page, you will see the output on the console. 
8. Here in app.js, we will be using 'JSX' also called Javascript XML. 
9. We are going to use babel. It is a Javascript compiler. The most common use of Babel is taking features from ES6 and ES7 and compiling them to ES5 code.

Setting up Babel

1. We have to add various plugins and presets in order to babel perform compilation on JSX code.
2. We will be using two presets from Babel, one is env and other is React.
3. Open the command prompt, navigate to the project folder and run following command.
	* yarn global add babel-cli@6.24.1.
4. Now Babel command will be available in command prompt. The following command will help us to find if babel is installed correctly or not
	*  babel --help
5. Now run the following command
	* yarn init. This command will ask a few questions. Just skip all and only type author name as Malick Arsalan or any name you want.
    Note: What it does? It generates a brand new file in our project.
    * yarn add babel-preset-react@6.24.1 babel-preset-env@1.5.2.
    Note: This will add dependencies in the package.json file. Further, it creates a node_modules folder where it installs all modules required by above presets we have installed previously. It also creates a "yarn.lock" file.  It is a file, which we will never change manually.
6. Now create new folder 'src' and create file app.js inside it.
7. app.js inside 'src' folder is where we write JSX code. app.js inside 'script' folder is gonna auto-generate file
8. '$:/src/app.js' will compile and save in '$:public/scripts/app.js' and when it updates it will render on index.html.
9. Open the command prompt and execute the following scripts
	* babel src/app.js --out-file=public/scripts/app.js --presets=env,react
	Break up of above script
                    babel = use when running babel script
               src/app.js = the file has to compile
               --out-file = defin file where compile code will get save
	public/scripts.app.js = output file name
                --presets = use to set presets we have to use
                env,react = names of preset
 	Note: This script will compile '$:/src/app.js' and update the compile code into '$:/scripts/app.js'.
	*  babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch
	Note :  This is going to watch '$:/src/app.js' changes and automatically create new '$:public/scripts/app.js' with compiled code.
10. Open another command prompt and the following script
	* live-server public
11. Now Open VS Code and start codding, change the template variable and you will see the change in '$:public/script/app.js' file and on browser simultaneously.
12. When we get react code from any repository, it does not provide node_modules directory, for such case we have to run the following script but before we have to stop babel script.
	*  yarn install
	Note: this will check package.json and install all dependencies.

Exploring JSX
1. Install plugin Babel ES6/ES7.
2. Also, install the following plugin
	* Beautify css/sass/scss/less
	* Duplicate action
	* ESLint
	* Git History (git log)
	* Path intellisense
	* Sass Lint
	* SCSS IntelliSense
	* Sublime Text Keymap and Settings Importer
3. In JSX file we can have single root element. For this we wil use <div/> as root tab or element.
Challenge: 1
* Create a templateTwo var JSX expression
* root div
* h1 -> Name
* p ->  Age
* p ->  Location
* Render templateTwo instead of template

JSX Expression  
Challenge: 2
* Create app object title/subtitle
* use title/subtitle in the template
* render template

Conditional Rendering in JSX
1. We can use the following
* if statement
* ternary operators
* logical and operator
2.  We can use undefined, null, True, and false in JSX but JSX just ignore these values. This is a very useful feature.
Challenge: 3
* Only render the subtitle (and 'p' tag), if subtitle exist - Logical and operator
* Render new p tag - if 'options.length > 0', then "Here are your options" else   "No options"

ES6 Aside const and Let
1. Create a folder inside src with a name playground
2. Inside folder create file src/playground/es6-let-const.js
3. open command prompt where Babel is running.
4. Press Ctrl + C to stop Babel.
5. execute the following script
	* babel src/playground/es6-let-const.js --out-file=public/scripts/app.js --presets=env,react --watch
